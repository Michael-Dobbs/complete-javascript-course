-----------------
---Strict Mode---
-----------------

To code in strict mode, you must start the script file with the following in line 1:

'use strict';

Strict mode allows for improved error catching and reporting. It also reserves certain keywords in case they may be used un the future (private, interface, void, etc.).

-------------
---Display---
-------------

console.log(); = Write to console
alert(); = Display a browser notification.
prompt(); = Display a prompt for input from user.
comments are similar to html - //comment or /*comment*/

---------------
---Variables---
---------------

1.)Syntax (let, const, var))

let = mutable or changing variable
let name = 'test'; = String declaration & assignment.
note: javascript supports dynamic typing.
Can reassign value without let keyword. (name = 'test2')

const = not mutable/changeable.
const PI = 3.1415; declaration and assignment in one.
const PI; just declaration.

var = legacy variables (should be avoided now).
var name = 'test'; String declaration & assignment.

console.log(typeof name); = logs var. type in console. (there is a legacy bug where null returns 'object').

2.)Rules 
Names can't start with a number, cannot be reserved javascript keywords, and must only contain letters, numbers, underscores (_), or dollar signs ($). 

3.)Best practices are to have full CAPS for constants. (i.e. PI = 3.14)

4.)Primitive Data Types:
    I. Number - 1 or 1.0
    I. String - "Text"
    I. Boolean - true or false
    IV. Undefined - named, but not assigned value
    V. Null - Empty or void of value
    VI. Symbol - Unique and unchanged
    VII. BigInt - Number that is to large to store in I.

---------------
---Operators---
---------------

1.) Arithmatic Operators
Addition +
Subtraction -
Multiplication *
Division /
Exponential Mult. **
Modulus (remainder division) 

2.)typeof Operator (returns variable/value types)

3.)Assignment Operators (give and change values to variables)
Basic assignment = 
Augment +=, -=, *=, /=
Increment ++ (example - x++;)
Decrement -- (example - x--;)

4.)Comparison Operators (compare values)
Greater Than >
Less than <
Equal to ==
Strict euality === (checks variable types too)
Greater Than or equal >=
Less than or equal <=
Not Equal !=
Strict Not Equal !==

5.)Operator Precedence
typeof is Highest
Arithmatic 2nd highest
Comparison lower
Assignment lowest

6.)See also Ternary/Conditional operators in decision making section.

-------------
---Strings---
-------------

1.) Concatenation done with + and type Coercion is automatic.

Since spacing and overhead of concatenation for long sentences is annoying. String template literals exist.

2.) Strings entered in `` become template literals.
These literals can have combinations of characters/strings and variables inside ${}.

example: let test = `I'm ${age} years old.`

3.) New lines in regular strings:
console.log('String with \n\ newline')

New lines in template literals are automatically created when hitting return key.

---------------
---Decisions---
---------------

1.) if, else if, else.
if (condition) {execute code}
else {execute code}
else if (condition) {execute code}

Can execute single operations without {} - ex: if (age = 21) console.log(`You are old`);

2.) Switch statements - good for when multiple options have the same code executed, or if options are explicitly listed (like days of week in a schedule).

switch (condition) {
    case 'condition1':
    case 'condition2':
        run code
        break;
    case 'condition3':
        run code
        break;
    default:
        run code
        break
}

3.) Ternary (3 part) Conditional execution - Single statement/quick decision execution.

const size = 22;
size == 23 ? console.log(`The Clothes fit.`) : console.log(`They do not fit.`);

    I.) Can also assign variable values.

const fit = size == 23 ? '`The Clothes fit.`' : '`They do not fit.`' ;

    II.) Can be used inside of template literals.

console.log(`I tested whether the clothes fit for you. $(size == 23 ? 'The Clothes fit.' : 'They do not fit.').`);




----------------------------------
---Type Conversion and Coercion---
----------------------------------

JavaScript automatically does type coercion as it processes. Addition symbols tend to create Strings, while subtraction, multiplication, and division symbols create numbers.

** Note: Can cause errors in code you aren't sure how it will result.

Most coercion occurs during logical operations or in console logging.

Manual type conversion is done through multiple methods.

1.)Number() - must be number convertable or NaN is returned
2.)String() - will to strings, but runs into issues with truthy/falsy values (see below).
3.)Bool() - 

Falsy: Values that arent exactly false, but will become so if trying to convert to boolean.
    I.) 0
    II.) ''
    III.) undefined
    IV.) null
    V.) Nan

Truthy: Every other value that will be converted to true.

-----------
---Input---
-----------

prompt() - Prompt function asks the user for input.


-------------
---Boolean---
-------------

&& AND - Both must be true or false
|| OR - Only 1 must be true or false
! NOT - Inverts a true/false.

---------------
---Functions---
---------------

